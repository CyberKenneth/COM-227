package hw2;

public class FuzzballGame {
	public static final int MAX_BALLS = 4;
	public static final int MAX_OUTS = 3;
	public static final int MAX_STRIKES = 3;
	private int inning = 1;
	private boolean topOfInning = true;
	private int outs = 0;
	private int strikes = 0;
	private int balls = 0;
	private int team0 = 0;
	private int team1 = 0;
	private final int totalInnings;
	// Corrected to accurately represent bases
	private int[] bases = new int[4]; // 0: first base, 1: second base, 2: third base, 3: for scoring logic
	// Assuming bases is your int[] array representing base occupancy


	 public FuzzballGame(int givenNumInnings) {
	        this.totalInnings = givenNumInnings;
	        this.inning = 1; // Start at the first inning
	        this.topOfInning = true; // It's the top of the inning
	        resetPitchCount(); // Resets strikes and balls
	        clearBases(); // Clears all bases for the start of the game
	    }

	 private void resetPitchCount() {
	        this.strikes = 0;
	        this.balls = 0;
	    }


	private void advanceRunners(int Bases) {
	    int scoredDuringHit = 0; // Track runs scored during this hit

	    // Handle scoring for home runs separately
	    if (Bases == 4) {
	        for (int i = 0; i < 3; i++) { // Include all runners plus the batter
	            if (bases[i] == 1) {
					scoredDuringHit++;
				}
	            bases[i] = 0; // Clear bases since everyone scores
	        }
	        scoredDuringHit++; // Account for the batter's score
	    } else {
	        // Advance runners based on the hit
	        for (int i = 2; i >= 0; i--) { // Check from third to first base
	            if (bases[i] == 1) {
	                int newBaseIndex = i + Bases;
	                if (newBaseIndex > 2) {
	                    scoredDuringHit++; // Runner scores
	                } else {
	                    bases[newBaseIndex] = 1; // Advance runner
	                }
	                bases[i] = 0; // Clear previous base
	            }
	        }
	        bases[Bases - 1] = 1; // Place the batter based on the hit type
	    }

	    // Update the score
	    for (int i = 0; i < scoredDuringHit; i++) {
	        updateScore(topOfInning);
	    }
	}



	private void calledStrike() {
		if (strikes  >= MAX_STRIKES) {
			outs++;
			strikes = 0; // Reset strikes for the next batter
			if (outs >= MAX_OUTS) {
				nextInning();
			}
		}
	}
	// Oversize the array to avoid bounds issues
	public void caughtFly() {
		outs++;
		if (outs >= MAX_OUTS) {
			nextInning();
		}
	}
	
	private void clearBases() {
	    for (int i = 0; i < bases.length; i++) {
	        bases[i] = 0; // Clear all bases
	    }
	}
	public boolean gameEnded() {
	    int currentInning = getCurrentInning();
	    boolean beyondLastInning = currentInning > totalInnings;
	    boolean lastInningBottomOver = (currentInning == totalInnings) && !isTopOfInning() && (team0 != team1);
	    return beyondLastInning || lastInningBottomOver;
	}

	public int getCurrentInning() {
		return inning;
	}



	public int getBallCount() {
		return balls;
	}
	public void advanceRunnersOnWalk() {
	    // Score from third base if bases are loaded.
	    if (bases[0] == 1 && bases[1] == 1 && bases[2] == 1) {
	        updateScore(topOfInning); // The runner on third base scores.
	    }

	    // Cascade the runners forward. This logic ensures that it works even if bases are not loaded.
	    for (int i = 2; i > 0; i--) { // Start from third base going down to second.
	        bases[i] = bases[i - 1]; // Move each runner forward one base.
	    }

	    // The batter takes first base due to the walk.
	    bases[0] = 1;
	}




	  
	    public String getBasesState() {
	        StringBuilder sb = new StringBuilder();
	        // Loop starts from 1 to 3 to cover first, second, and third bases respectively
	        for (int i = 1; i <= 3; i++) {
	            sb.append(bases[i] == 1 ? "X" : "O");
	        }
	        return sb.toString();
	    }
	

	public int getCalledStrikes() {
		return strikes;
	}



	public int getCurrentOuts() {
		return outs;
	}

	public int getTeam0() {
		return team0;
	}

	public int getTeam0Score() {
		return team0;
	}


	public int getTeam1Score() {
		return team1;
	}


public void hit(int distance) {
	 if (gameEnded()) {
	        return; // Exit the method if the game has ended
	    }
	// Check if it's a foul leading to an out
	if (distance < 15) {
		// This includes the case where the distance could be negative
		outs++;
		if (outs >= MAX_OUTS) {
			nextInning();
		}
		// Reset strikes and balls for the next batter
		strikes = 0;
		balls = 0;
		return; // Exit early since the batter is out
	}

	// Interpret the hit based on distance
	if (distance >= 15 && distance < 150) {
		// Single
		advanceRunners(1);
	} else if (distance >= 150 && distance < 200) {
		// Double
		advanceRunners(2);
	} else if (distance >= 200 && distance < 250) {
		// Triple
		advanceRunners(3);
	} else if (distance >= 250) {
		// Home run
		advanceRunners(4); // All runners including the batter score
	}

	// Reset strikes and balls for the next batter
	strikes = 0;
	balls = 0;
}

public boolean isTopOfInning() {
	return topOfInning;
}



private void nextInning() {
	outs = 0; // Reset outs
	strikes = 0; // Reset strikes
	balls = 0; // Reset balls
	clearBases(); // Clear bases for the next inning phase

	if (topOfInning) {
		topOfInning = false; // Switch to bottom of the inning without incrementing the inning number
	} else {
		topOfInning = true; // Switch to top of the next inning
		inning++; // Increment the inning at the transition from bottom to top
	}
}

public boolean runnerOnBase(int base) {
    if (base >= 1 && base <= 3) {
        return bases[base - 1] == 1; // Check if the specified base is occupied
    }
    return false; // Return false if the base number is out of range
}




public void setTeam0(int team0) {
	this.team0 = team0;
}

public void setTeam1(int team1) {
	this.team1 = team1;
}


public void strike(boolean swung) {
    if (gameEnded()) {
        return; // No further action if the game has already ended.
    }

    if (swung || strikes >= MAX_STRIKES - 1) {
        // If the player swung at the pitch or it's the last strike before an out,
        // increment the outs and reset the strikes.
        outs++;
        strikes = 0; // Reset strikes for the next batter.

        if (outs >= MAX_OUTS) {
            nextInning(); // Transition to the next inning if max outs are reached.
            // Note: The nextInning method should handle resetting outs and clearing bases as needed.
        }
    } else {
        // If it's not a swing and not yet the last strike, simply increment the strike count.
        strikes++;
    }
}


@Override
public String toString() {
	return "Inning: " + inning + " Top: " + topOfInning + " Outs: " + outs + " Strikes: " + strikes + " Balls: " + balls
			+ " Team0: " + team0 + " Team1: " + team1;
}

public void ball() {
    balls++;
    if (balls >= MAX_BALLS) {
        balls = 0; // Reset the ball count after a walk
        advanceRunnersOnWalk(); // Delegate to handle advancing runners and scoring
    }
}


private void updateScore(boolean topOfInning) {
    if (topOfInning) {
        team0++;
    } else {
        team1++;
    }
}

public int whichInning() {
	return inning;
}


}
