package hw2;

public class FuzzballGame {
	public static final int MAX_BALLS = 4;
	public static final int MAX_OUTS = 3;
	public static final int MAX_STRIKES = 2;
	private int inning = 1;
	private boolean topOfInning = true;
	private int outs = 0;
	private int strikes = 0;
	private int balls = 0;
	private int team0 = 0;
	private int team1 = 0;
	private final int totalInnings;
	// Corrected to accurately represent bases
	private int[] bases = new int[4]; // 0: first base, 1: second base, 2: third base, 3: for scoring logic
	// Assuming bases is your int[] array representing base occupancy
	

	public FuzzballGame(int totalInnings) {
		this.totalInnings = totalInnings;
	}


	public void advanceRunners(int numBases) {
	    int scoredDuringHit = 0; // Track runs scored during this hit

	    // Handle scoring for home runs separately
	    if (numBases == 4) {
	        for (int i = 0; i < 3; i++) { // Include all runners plus the batter
	            if (bases[i] == 1) scoredDuringHit++;
	            bases[i] = 0; // Clear bases since everyone scores
	        }
	        scoredDuringHit++; // Account for the batter's score
	    } else {
	        // Advance runners based on the hit
	        for (int i = 2; i >= 0; i--) { // Check from third to first base
	            if (bases[i] == 1) {
	                int newBaseIndex = i + numBases;
	                if (newBaseIndex > 2) {
	                    scoredDuringHit++; // Runner scores
	                } else {
	                    bases[newBaseIndex] = 1; // Advance runner
	                }
	                bases[i] = 0; // Clear previous base
	            }
	        }
	        bases[numBases - 1] = 1; // Place the batter based on the hit type
	    }

	    // Update the score
	    for (int i = 0; i < scoredDuringHit; i++) {
	        updateScore(topOfInning);
	    }
	}
	
	
	public void advanceRunnersOnWalk() {
	    // Check if a runner is on third base; if so, they score.
	    if (bases[2] == 1) {
	        updateScore(topOfInning); // This runner scores.
	        bases[2] = 0; // Clear third base since the runner has scored.
	    }
	    
	    // Move runners from second to third, and first to second.
	    if (bases[1] == 1) {
	        bases[2] = 1; // Runner on second advances to third.
	        bases[1] = 0; // Clear second base.
	    }
	    if (bases[0] == 1) {
	        bases[1] = 1; // Runner on first advances to second.
	        bases[0] = 0; // Clear first base.
	    }
	    
	    // The batter takes first base due to the walk.
	    bases[0] = 1;
	}

	public void calledStrike() {
		strikes++;
		if (strikes >= MAX_STRIKES) {
			outs++;
			strikes = 0; // Reset strikes for the next batter
			if (outs >= MAX_OUTS) {
				nextInning();
			}
		}
	}
	// Oversize the array to avoid bounds issues
	public void caughtFly() {
		outs++;
		if (outs >= MAX_OUTS) {
			nextInning();
		}
	}
	private void clearBases() {
	    for (int i = 0; i < bases.length; i++) {
	        bases[i] = 0; // Clear all bases
	    }
	}
	public boolean gameEnded() {
		return inning > totalInnings && !topOfInning;
	}



	public int getBallCount() {
		return balls;
	}




	public String getBasesStatus() {
	    StringBuilder basesStatus = new StringBuilder();
	    // Directly use the integer array 'bases' assuming it is correctly defined in the class
	    for (int i = 0; i < 3; i++) {
	        if (bases[i] == 1) { // If the base is occupied
	            basesStatus.append("X "); // Append "X " to the string for an occupied base
	        } else {
	            basesStatus.append("O "); // Append "O " to the string for an unoccupied base
	        }
	    }
	    return basesStatus.toString().trim(); // Return the string representation, trimming any trailing space
	}

	public int getCalledStrikes() {
		return strikes;
	}



	public int getCurrentOuts() {
		return outs;
	}

	public int getTeam0() {
		return team0;
	}

	public int getTeam0Score() {
		return team0;
	}


	public int getTeam1Score() {
		return team1;
	}


public void hit(int distance) {
	 if (gameEnded()) {
	        return; // Exit the method if the game has ended
	    }
	// Check if it's a foul leading to an out
	if (distance < 15) {
		// This includes the case where the distance could be negative
		outs++;
		if (outs >= MAX_OUTS) {
			nextInning();
		}
		// Reset strikes and balls for the next batter
		strikes = 0;
		balls = 0;
		return; // Exit early since the batter is out
	}

	// Interpret the hit based on distance
	if (distance >= 15 && distance < 150) {
		// Single
		advanceRunners(1);
	} else if (distance >= 150 && distance < 200) {
		// Double
		advanceRunners(2);
	} else if (distance >= 200 && distance < 250) {
		// Triple
		advanceRunners(3);
	} else if (distance >= 250) {
		// Home run
		advanceRunners(4); // All runners including the batter score
	}

	// Reset strikes and balls for the next batter
	strikes = 0;
	balls = 0;
}

public boolean isTopOfInning() {
	return topOfInning;
}


 
private void nextInning() {
	outs = 0; // Reset outs
	strikes = 0; // Reset strikes
	balls = 0; // Reset balls
	clearBases(); // Clear bases for the next inning phase

	if (topOfInning) {
		topOfInning = false; // Switch to bottom of the inning without incrementing the inning number
	} else {
		topOfInning = true; // Switch to top of the next inning
		inning++; // Increment the inning at the transition from bottom to top
	}
}

public boolean runnerOnBase(int base) {
    if (base >= 1 && base <= 3) {
        return bases[base - 1] == 1; // Check if the specified base is occupied
    }
    return false; // Return false if the base number is out of range
}




public void setTeam0(int team0) {
	this.team0 = team0;
}

public void setTeam1(int team1) {
	this.team1 = team1;
}


public void strike(boolean swung) {
	if (gameEnded()) return;
	if (swung || strikes >= MAX_STRIKES) {
		outs++;
		strikes = 0;
		if (outs >= MAX_OUTS) nextInning();
	} else {
		strikes++;
	}
}

@Override
public String toString() {
	return "Inning: " + inning + " Top: " + topOfInning + " Outs: " + outs + " Strikes: " + strikes + " Balls: " + balls
			+ " Team0: " + team0 + " Team1: " + team1;
}


public void ball() {
    balls++;
    if (balls >= MAX_BALLS) {
        balls = 0; // Reset the ball count after a walk

        // Check if bases are loaded before advancing runners
        boolean basesLoaded = bases[0] == 1 && bases[1] == 1 && bases[2] == 1;
        if (basesLoaded) {
            // If bases are loaded and the batter takes a walk, each runner advances one base
            // This includes scoring the runner from third base
            updateScore(topOfInning); // Score for the team currently at bat
            // Advance all runners, causing the runner on third to score
            advanceRunnersOnWalk();
        } else {
            // Advance runners logic, making room for the batter at first base
            advanceRunnersOnWalk();
        }
    }
}


private void updateScore(boolean topOfInning) {
    if (topOfInning) {
        team0++;
    } else {
        team1++;
    }
}

public int whichInning() {
	return inning;
}


}
